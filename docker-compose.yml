version: '3.8'

services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: intelligent-coding-assistant-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: intelligent-coding-assistant-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: intelligent-coding-assistant-backend
    ports:
      - "8000:8000"
    environment:
      # API Keys (set these in .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      
      # Database URLs
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379
      
      # Model Configuration
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - DEFAULT_LLM_PROVIDER=openai
      - DEFAULT_MODEL=gpt-4
      
      # Application Settings
      - DEBUG=false
      - LOG_LEVEL=info
      - MAX_WORKERS=4
      - CORS_ORIGINS=*
      
      # Security
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this}
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      
    volumes:
      - ./backend/app:/app
      - backend_cache:/app/.cache
    depends_on:
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: intelligent-coding-assistant-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    restart: unless-stopped
    profiles:
      - production

volumes:
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  backend_cache:
    driver: local

networks:
  default:
    name: intelligent-coding-assistant-network
